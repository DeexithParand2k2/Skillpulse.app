const javaMcqEntryTest = [
    // Sub-topic: Inheritance
    {
      question_number: 1,
      question: "What is inheritance in Java?",
      user_answer: "",
      option1: "A. It's a way to create multiple instances of a class",
      option2: "B. It's a way to hide data from other classes",
      option3: "C. It's a way to achieve code reusability and method overriding",
      option4: "D. It's a way to define abstract classes",
      expected_answer: "C",
      sub_topic: "inheritance",
    },
    {
      question_number: 2,
      question: "Which keyword is used to implement inheritance in Java?",
      user_answer: "",
      option1: "A. extends",
      option2: "B. implements",
      option3: "C. inheritance",
      option4: "D. inherits",
      expected_answer: "A",
      sub_topic: "inheritance",
    },
    {
      question_number: 3,
      question: "What is the main advantage of using inheritance in Java?",
      user_answer: "",
      option1: "A. It reduces code complexity",
      option2: "B. It allows multiple inheritance",
      option3: "C. It makes all methods public",
      option4: "D. It eliminates the need for constructors",
      expected_answer: "A",
      sub_topic: "inheritance",
    },
  
    // Sub-topic: Polymorphism
    {
      question_number: 4,
      question: "What is polymorphism in Java?",
      user_answer: "",
      option1: "A. It's a way to achieve multiple inheritance",
      option2: "B. It's a way to create objects",
      option3: "C. It's a way to represent the same method in different forms",
      option4: "D. It's a way to declare variables",
      expected_answer: "C",
      sub_topic: "polymorphism",
    },
    {
      question_number: 5,
      question: "Which type of polymorphism is achieved through method overriding?",
      user_answer: "",
      option1: "A. Compile-time polymorphism",
      option2: "B. Static polymorphism",
      option3: "C. Runtime polymorphism",
      option4: "D. Dynamic polymorphism",
      expected_answer: "D",
      sub_topic: "polymorphism",
    },
    {
      question_number: 6,
      question: "Why is abstraction important in Java?",
      user_answer: "",
      option1: "A. It simplifies code",
      option2: "B. It allows multiple inheritance",
      option3: "C. It makes all classes final",
      option4: "D. It exposes implementation details",
      expected_answer: "A",
      sub_topic: "polymorphism",
    },
  
    // Sub-topic: Encapsulation
    {
      question_number: 7,
      question: "What is encapsulation in Java?",
      user_answer: "",
      option1: "A. It's a way to make classes public",
      option2: "B. It's a way to hide the implementation details of a class",
      option3: "C. It's a way to define constructors",
      option4: "D. It's a way to create static methods",
      expected_answer: "B",
      sub_topic: "encapsulation",
    },
    {
      question_number: 8,
      question: "What is the purpose of encapsulation in Java?",
      user_answer: "",
      option1: "A. To hide the implementation details of a class",
      option2: "B. To make all methods public",
      option3: "C. To create static methods",
      option4: "D. To define constructors",
      expected_answer: "A",
      sub_topic: "encapsulation",
    },
    {
      question_number: 9,
      question: "Which access modifiers are commonly used for encapsulation in Java?",
      user_answer: "",
      option1: "A. public and private",
      option2: "B. final and static",
      option3: "C. protected and default",
      option4: "D. volatile and transient",
      expected_answer: "A",
      sub_topic: "encapsulation",
    },
  
    // Sub-topic: Abstraction
    {
      question_number: 10,
      question: "What is abstraction in Java?",
      user_answer: "",
      option1: "A. It's a way to define abstract classes",
      option2: "B. It's a way to create interfaces",
      option3: "C. It's a way to represent real-world objects as classes",
      option4: "D. It's a way to hide complexity and show only relevant features of an object",
      expected_answer: "D",
      sub_topic: "abstraction",
    },
    {
      question_number: 11,
      question: "What is an abstract class in Java?",
      user_answer: "",
      option1: "A. A class with no fields",
      option2: "B. A class that cannot be instantiated",
      option3: "C. A class with only public methods",
      option4: "D. A class with no methods",
      expected_answer: "B",
      sub_topic: "abstraction",
    },
    {
      question_number: 12,
      question: "Can interfaces in Java contain method implementations?",
      user_answer: "",
      option1: "A. Yes, interfaces can have method implementations",
      option2: "B. No, interfaces can only declare method signatures",
      option3: "C. Interfaces can have both method declarations and implementations",
      option4: "D. Interfaces cannot have any methods",
      expected_answer: "B",
      sub_topic: "abstraction",
    },
  
    // Sub-topic: Interfaces
    {
      question_number: 13,
      question: "What is an interface in Java?",
      user_answer: "",
      option1: "A. It's a way to define abstract classes",
      option2: "B. It's a way to create multiple instances of a class",
      option3: "C. It's a way to declare methods without implementation",
      option4: "D. It's a way to hide the implementation details of a class",
      expected_answer: "C",
      sub_topic: "interfaces",
    },
    {
      question_number: 14,
      question: "Can a Java class implement multiple interfaces?",
      user_answer: "",
      option1: "A. No, Java does not support multiple interfaces",
      option2: "B. Yes, a class can implement multiple interfaces",
      option3: "C. A class can implement only one interface",
      option4: "D. A class can implement interfaces, but not more than two",
      expected_answer: "B",
      sub_topic: "interfaces",
    },
    {
      question_number: 15,
      question: "Which keyword is used to declare an interface in Java?",
      user_answer: "",
      option1: "A. class",
      option2: "B. interface",
      option3: "C. implements",
      option4: "D. extends",
      expected_answer: "B",
      sub_topic: "interfaces",
    },
  ];

  const javaMcqExitTest = [
    // Sub-topic: Inheritance
    {
      question_number: 1,
      question: "What is method overriding in Java?",
      user_answer: "",
      option1: "A. It allows a subclass to define a method that is already defined in its superclass",
      option2: "B. It allows a method to call itself recursively",
      option3: "C. It allows a method to be defined in multiple classes",
      option4: "D. It allows a method to override its own implementation",
      expected_answer: "A",
      sub_topic: "inheritance",
    },
    {
      question_number: 2,
      question: "What is the 'super' keyword used for in Java?",
      user_answer: "",
      option1: "A. To access the superclass's static variables",
      option2: "B. To invoke the superclass's constructor",
      option3: "C. To define a new class",
      option4: "D. To declare a variable",
      expected_answer: "B",
      sub_topic: "inheritance",
    },
    {
      question_number: 3,
      question: "What is the difference between 'method overloading' and 'method overriding' in Java?",
      user_answer: "",
      option1: "A. They are the same and can be used interchangeably",
      option2: "B. Method overloading is related to inheritance, while method overriding is not",
      option3: "C. Method overloading involves defining multiple methods with the same name in a class, while method overriding involves redefining a method in a subclass",
      option4: "D. Method overloading is only applicable to static methods",
      expected_answer: "C",
      sub_topic: "inheritance",
    },
  
    // Sub-topic: Polymorphism
    {
      question_number: 4,
      question: "What is dynamic polymorphism in Java?",
      user_answer: "",
      option1: "A. It allows a method to have multiple definitions within the same class",
      option2: "B. It allows a method to be called at compile-time",
      option3: "C. It allows a method to be called at runtime based on the actual object's type",
      option4: "D. It allows a method to be accessed using a 'super' keyword",
      expected_answer: "C",
      sub_topic: "polymorphism",
    },
    {
      question_number: 5,
      question: "What is a final method in Java?",
      user_answer: "",
      option1: "A. A method that cannot be inherited",
      option2: "B. A method that cannot be overridden",
      option3: "C. A method that cannot be called",
      option4: "D. A method that cannot be declared as 'public'",
      expected_answer: "B",
      sub_topic: "polymorphism",
    },
    {
      question_number: 6,
      question: "What is compile-time polymorphism in Java?",
      user_answer: "",
      option1: "A. It allows a method to have multiple definitions within the same class",
      option2: "B. It allows a method to be called at runtime based on the actual object's type",
      option3: "C. It allows a method to be called at compile-time based on method signatures",
      option4: "D. It allows a method to be called using the 'this' keyword",
      expected_answer: "C",
      sub_topic: "polymorphism",
    },
  
    // Sub-topic: Encapsulation
    {
      question_number: 7,
      question: "What is data hiding in Java?",
      user_answer: "",
      option1: "A. It's a way to hide the implementation details of a class",
      option2: "B. It's a way to hide data from other classes",
      option3: "C. It's a way to make all class members public",
      option4: "D. It's a way to define only static variables",
      expected_answer: "A",
      sub_topic: "encapsulation",
    },
    {
      question_number: 8,
      question: "Which access modifier provides the highest level of encapsulation in Java?",
      user_answer: "",
      option1: "A. public",
      option2: "B. protected",
      option3: "C. private",
      option4: "D. default (package-private)",
      expected_answer: "C",
      sub_topic: "encapsulation",
    },
    {
      question_number: 9,
      question: "What is the purpose of the 'getter' method in Java?",
      user_answer: "",
      option1: "A. To set the value of a private variable",
      option2: "B. To get the value of a private variable",
      option3: "C. To declare a new variable",
      option4: "D. To create a new object",
      expected_answer: "B",
      sub_topic: "encapsulation",
    },
  
    // Sub-topic: Abstraction
    {
      question_number: 10,
      question: "What is an abstract method in Java?",
      user_answer: "",
      option1: "A. A method that has no implementation",
      option2: "B. A method that cannot be declared as 'public'",
      option3: "C. A method that cannot be called",
      option4: "D. A method that cannot be overridden",
      expected_answer: "A",
      sub_topic: "abstraction",
    },
    {
      question_number: 11,
      question: "Can an abstract class have non-abstract (concrete) methods in Java?",
      user_answer: "",
      option1: "A. No, an abstract class can only have abstract methods",
      option2: "B. Yes, an abstract class can have both abstract and concrete methods",
      option3: "C. An abstract class cannot have any methods",
      option4: "D. An abstract class can have only private methods",
      expected_answer: "B",
      sub_topic: "abstraction",
    },
    {
      question_number: 12,
      question: "What is the purpose of the 'interface' keyword in Java?",
      user_answer: "",
      option1: "A. To define abstract classes",
      option2: "B. To create multiple instances of a class",
      option3: "C. To declare methods without implementation",
      option4: "D. To hide the implementation details of a class",
      expected_answer: "C",
      sub_topic: "abstraction",
    },
  
    // Sub-topic: Interfaces
    {
      question_number: 13,
      question: "Can an interface in Java have fields (variables)?",
      user_answer: "",
      option1: "A. Yes, an interface can have fields",
      option2: "B. No, an interface cannot have fields",
      option3: "C. An interface can have fields only if they are marked as 'static'",
      option4: "D. An interface can have fields only if they are marked as 'final'",
      expected_answer: "A",
      sub_topic: "interfaces",
    },
    {
      question_number: 14,
      question: "What is the difference between an abstract class and an interface in Java?",
      user_answer: "",
      option1: "A. An abstract class cannot have fields, while an interface can",
      option2: "B. An abstract class can have multiple inheritance, while an interface cannot",
      option3: "C. An abstract class can have concrete methods, while an interface cannot",
      option4: "D. An abstract class cannot be inherited, while an interface can",
      expected_answer: "C",
      sub_topic: "interfaces",
    },
    {
      question_number: 15,
      question: "Can a class implement multiple interfaces in Java?",
      user_answer: "",
      option1: "A. No, a class can implement only one interface",
      option2: "B. Yes, a class can implement multiple interfaces",
      option3: "C. A class can implement interfaces, but not more than two",
      option4: "D. A class can implement interfaces only if they are marked as 'static'",
      expected_answer: "B",
      sub_topic: "interfaces",
    },
  ];
  
  // You can continue to add more questions or adjust as needed for further difficulty.
  
  
  // You can continue to add more questions for other sub-topics here

  const cCppMcqEntryTest = [
    // Sub-topic: Basic Syntax and Language Fundamentals
    {
      question_number: 1,
      question: "What is the purpose of the 'main' function in C/C++?",
      user_answer: "",
      option1: "A. It defines global variables",
      option2: "B. It initializes the program",
      option3: "C. It serves as the program's entry point",
      option4: "D. It handles file input/output",
      expected_answer: "C",
      sub_topic: "Basic Syntax and Language Fundamentals",
    },
    {
      question_number: 2,
      question: "Which symbol is used for single-line comments in C/C++?",
      user_answer: "",
      option1: "A. //",
      option2: "B. /*",
      option3: "C. #",
      option4: "D. --",
      expected_answer: "A",
      sub_topic: "Basic Syntax and Language Fundamentals",
    },
    {
      question_number: 3,
      question: "What is the 'sizeof' operator used for in C/C++?",
      user_answer: "",
      option1: "A. It returns the size of a data type in bytes",
      option2: "B. It calculates the square root of a number",
      option3: "C. It converts a variable to a different data type",
      option4: "D. It compares two variables",
      expected_answer: "A",
      sub_topic: "Basic Syntax and Language Fundamentals",
    },
  
    // Sub-topic: Functions and Scope
    {
      question_number: 4,
      question: "What is function overloading in C++?",
      user_answer: "",
      option1: "A. It's a way to declare multiple functions with the same name but different parameters",
      option2: "B. It's a way to override a function in a derived class",
      option3: "C. It's a way to call a function from another function",
      option4: "D. It's a way to create global functions",
      expected_answer: "A",
      sub_topic: "Functions and Scope",
    },
    {
      question_number: 5,
      question: "In C/C++, what is the scope of a local variable?",
      user_answer: "",
      option1: "A. It can be accessed from any function in the program",
      option2: "B. It can be accessed only within the function where it is declared",
      option3: "C. It can be accessed from any file in the project",
      option4: "D. It can be accessed globally",
      expected_answer: "B",
      sub_topic: "Functions and Scope",
    },
    {
      question_number: 6,
      question: "What is the return type of the 'main' function in C/C++?",
      user_answer: "",
      option1: "A. void",
      option2: "B. int",
      option3: "C. float",
      option4: "D. char",
      expected_answer: "B",
      sub_topic: "Functions and Scope",
    },
  
    // Sub-topic: Arrays and Pointers
    {
      question_number: 7,
      question: "How do you access an element in a C/C++ array?",
      user_answer: "",
      option1: "A. Using a for loop",
      option2: "B. Using the 'get' method",
      option3: "C. Using the index of the element",
      option4: "D. Using the 'array' keyword",
      expected_answer: "C",
      sub_topic: "Arrays and Pointers",
    },
    {
      question_number: 8,
      question: "What is a pointer in C/C++?",
      user_answer: "",
      option1: "A. A variable that stores an array",
      option2: "B. A variable that stores the memory address of another variable",
      option3: "C. A type of data structure",
      option4: "D. A reserved keyword for dynamic memory allocation",
      expected_answer: "B",
      sub_topic: "Arrays and Pointers",
    },
    {
      question_number: 9,
      question: "How do you declare a pointer variable in C/C++?",
      user_answer: "",
      option1: "A. Using the 'pointer' keyword",
      option2: "B. Using the 'declare' keyword",
      option3: "C. Using the '&' symbol",
      option4: "D. Using an asterisk (*) before the variable name",
      expected_answer: "D",
      sub_topic: "Arrays and Pointers",
    },
  
    // Sub-topic: Object-Oriented Programming (C++)
    {
      question_number: 10,
      question: "What is a class in C++?",
      user_answer: "",
      option1: "A. A variable that stores data",
      option2: "B. A function that performs a specific task",
      option3: "C. A user-defined data type that represents an object",
      option4: "D. A built-in data type",
      expected_answer: "C",
      sub_topic: "Object-Oriented Programming (C++)",
    },
    {
      question_number: 11,
      question: "What is a constructor in C++?",
      user_answer: "",
      option1: "A. A member function that destroys objects",
      option2: "B. A member function that creates objects",
      option3: "C. A data type for storing numbers",
      option4: "D. A reserved keyword for inheritance",
      expected_answer: "B",
      sub_topic: "Object-Oriented Programming (C++)",
    },
    {
      question_number: 12,
      question: "What is inheritance in C++?",
      user_answer: "",
      option1: "A. A way to create instances of a class",
      option2: "B. A way to hide data from other classes",
      option3: "C. A mechanism for creating a new class that is a modified version of an existing class",
      option4: "D. A way to define abstract classes",
      expected_answer: "C",
      sub_topic: "Object-Oriented Programming (C++)",
    },
  
    // Sub-topic: File Handling and Input/Output
    {
      question_number: 13,
      question: "What is the purpose of the 'ifstream' class in C++?",
      user_answer: "",
      option1: "A. It is used to write data to a file",
      option2: "B. It is used to read data from a file",
      option3: "C. It is used to close a file",
      option4: "D. It is used to create a file",
      expected_answer: "B",
      sub_topic: "File Handling and Input/Output",
    },
    {
      question_number: 14,
      question: "Which C++ library is used for file input and output operations?",
      user_answer: "",
      option1: "A. <iostream>",
      option2: "B. <fstream>",
      option3: "C. <fileio>",
      option4: "D. <stdio>",
      expected_answer: "B",
      sub_topic: "File Handling and Input/Output",
    },
    {
      question_number: 15,
      question: "How do you open a file for reading in C++?",
      user_answer: "",
      option1: "A. Using the 'write' function",
      option2: "B. Using the 'open' function with 'ios::out' mode",
      option3: "C. Using the 'open' function with 'ios::in' mode",
      option4: "D. Using the 'create' function",
      expected_answer: "C",
      sub_topic: "File Handling and Input/Output",
    },
  ];
  
  // You can continue to add more questions for the remaining sub-topics or adjust as needed
  
  const cCppMcqExitTest = [
    // Sub-topic: Basic Syntax and Language Fundamentals
    {
      question_number: 1,
      question: "What is the difference between 'int' and 'unsigned int' in C/C++?",
      user_answer: "",
      option1: "A. 'int' can store negative values, 'unsigned int' cannot",
      option2: "B. 'int' is used for floating-point numbers, 'unsigned int' for integers",
      option3: "C. There is no difference, they are synonyms",
      option4: "D. 'int' has a larger range than 'unsigned int'",
      expected_answer: "A",
      sub_topic: "Basic Syntax and Language Fundamentals",
    },
    {
      question_number: 2,
      question: "What is the purpose of the 'auto' keyword in C++?",
      user_answer: "",
      option1: "A. It automatically initializes variables",
      option2: "B. It automatically deduces the data type of a variable",
      option3: "C. It automatically deallocates memory",
      option4: "D. It automatically converts data types",
      expected_answer: "B",
      sub_topic: "Basic Syntax and Language Fundamentals",
    },
    {
      question_number: 3,
      question: "What does the 'volatile' keyword do in C/C++?",
      user_answer: "",
      option1: "A. It defines constant variables",
      option2: "B. It specifies that a variable may change at any time without any action being taken by the code",
      option3: "C. It optimizes code execution",
      option4: "D. It prevents a variable from being modified",
      expected_answer: "B",
      sub_topic: "Basic Syntax and Language Fundamentals",
    },
  
    // Sub-topic: Functions and Scope
    {
      question_number: 4,
      question: "What is a recursive function in C/C++?",
      user_answer: "",
      option1: "A. A function that calls itself",
      option2: "B. A function that returns no value",
      option3: "C. A function that cannot have parameters",
      option4: "D. A function that uses the 'return' keyword twice",
      expected_answer: "A",
      sub_topic: "Functions and Scope",
    },
    {
      question_number: 5,
      question: "What is the difference between 'pass by value' and 'pass by reference' in function parameters?",
      user_answer: "",
      option1: "A. They are the same and can be used interchangeably",
      option2: "B. 'Pass by value' creates a copy of the argument, while 'pass by reference' allows the function to directly modify the argument",
      option3: "C. 'Pass by value' is more efficient than 'pass by reference'",
      option4: "D. 'Pass by value' is used for primitive data types, while 'pass by reference' is used for objects",
      expected_answer: "B",
      sub_topic: "Functions and Scope",
    },
    {
      question_number: 6,
      question: "What is function template specialization in C++?",
      user_answer: "",
      option1: "A. A way to create specialized functions",
      option2: "B. A way to define functions inside other functions",
      option3: "C. A way to create generic functions",
      option4: "D. A way to overload functions",
      expected_answer: "A",
      sub_topic: "Functions and Scope",
    },
  
    // Sub-topic: Arrays and Pointers
    {
      question_number: 7,
      question: "What is a pointer to a pointer in C/C++?",
      user_answer: "",
      option1: "A. A pointer that points to the address of another pointer",
      option2: "B. A pointer with a double asterisk (**) syntax",
      option3: "C. A pointer that points to the end of an array",
      option4: "D. A pointer that cannot be dereferenced",
      expected_answer: "A",
      sub_topic: "Arrays and Pointers",
    },
    {
      question_number: 8,
      question: "What is pointer arithmetic in C/C++?",
      user_answer: "",
      option1: "A. Arithmetic operations performed on pointers",
      option2: "B. Arithmetic operations that produce a floating-point result",
      option3: "C. Arithmetic operations that can only be performed on integers",
      option4: "D. Arithmetic operations that involve complex numbers",
      expected_answer: "A",
      sub_topic: "Arrays and Pointers",
    },
    {
      question_number: 9,
      question: "How do you dynamically allocate memory for an array in C/C++?",
      user_answer: "",
      option1: "A. Using the 'new' keyword",
      option2: "B. Using the 'malloc' function",
      option3: "C. Using the 'sizeof' operator",
      option4: "D. Using the 'allocate' keyword",
      expected_answer: "A",
      sub_topic: "Arrays and Pointers",
    },
  
    // Sub-topic: Object-Oriented Programming (C++)
    {
      question_number: 10,
      question: "What is a destructor in C++?",
      user_answer: "",
      option1: "A. A member function that creates objects",
      option2: "B. A member function that destroys objects",
      option3: "C. A reserved keyword for inheritance",
      option4: "D. A way to create global objects",
      expected_answer: "B",
      sub_topic: "Object-Oriented Programming (C++)",
    },
    {
      question_number: 11,
      question: "What is encapsulation in C++?",
      user_answer: "",
      option1: "A. A way to hide data from other classes",
      option2: "B. A way to declare multiple functions with the same name",
      option3: "C. A way to create abstract classes",
      option4: "D. A way to define global variables",
      expected_answer: "A",
      sub_topic: "Object-Oriented Programming (C++)",
    },
    {
      question_number: 12,
      question: "What is multiple inheritance in C++?",
      user_answer: "",
      option1: "A. A way to inherit multiple classes into a single class",
      option2: "B. A way to create multiple objects",
      option3: "C. A way to declare multiple functions with the same name",
      option4: "D. A way to delete multiple objects",
      expected_answer: "A",
      sub_topic: "Object-Oriented Programming (C++)",
    },
  
    // Sub-topic: File Handling and Input/Output
    {
      question_number: 13,
      question: "What is the purpose of the 'ofstream' class in C++?",
      user_answer: "",
      option1: "A. It is used to read data from a file",
      option2: "B. It is used to write data to a file",
      option3: "C. It is used to create a file",
      option4: "D. It is used to close a file",
      expected_answer: "B",
      sub_topic: "File Handling and Input/Output",
    },
    {
      question_number: 14,
      question: "How do you read and write binary files in C++?",
      user_answer: "",
      option1: "A. Using the 'read' and 'write' functions with binary mode",
      option2: "B. Binary files cannot be read or written in C++",
      option3: "C. Using the 'binary' keyword in file open operations",
      option4: "D. Using the 'binaryread' and 'binarywrite' functions",
      expected_answer: "A",
      sub_topic: "File Handling and Input/Output",
    },
    {
      question_number: 15,
      question: "What is the purpose of 'seekg' and 'seekp' in C++ file handling?",
      user_answer: "",
      option1: "A. They are used to set the file permissions",
      option2: "B. They are used to skip characters in a file",
      option3: "C. They are used to set the file pointer position",
      option4: "D. They are used to open a file for reading and writing simultaneously",
      expected_answer: "C",
      sub_topic: "File Handling and Input/Output",
    },
  ];
  
  // You can continue to add more questions or adjust as needed for further difficulty.
  
  const oopsMcqEntryTest = [
    // Sub-topic: Classes
    {
      question_number: 1,
      question: "What is a class in object-oriented programming?",
      user_answer: "",
      option1: "A. A blueprint for creating objects",
      option2: "B. A specific object",
      option3: "C. A method for data storage",
      option4: "D. A built-in data type",
      expected_answer: "A",
      sub_topic: "classes",
    },
    {
      question_number: 2,
      question: "What is the primary purpose of a class constructor?",
      user_answer: "",
      option1: "A. To create objects",
      option2: "B. To define member functions",
      option3: "C. To destroy objects",
      option4: "D. To initialize object properties",
      expected_answer: "D",
      sub_topic: "classes",
    },
    {
      question_number: 3,
      question: "In object-oriented programming, what is encapsulation?",
      user_answer: "",
      option1: "A. The process of inheriting from a base class",
      option2: "B. The ability to hide the internal details of an object",
      option3: "C. The process of creating an object",
      option4: "D. The use of polymorphism",
      expected_answer: "B",
      sub_topic: "classes",
    },
  
    // Sub-topic: Objects
    {
      question_number: 4,
      question: "What is an object in object-oriented programming?",
      user_answer: "",
      option1: "A. A blueprint for creating classes",
      option2: "B. A specific instance of a class",
      option3: "C. A method for data manipulation",
      option4: "D. A reserved keyword for inheritance",
      expected_answer: "B",
      sub_topic: "objects",
    },
    {
      question_number: 5,
      question: "Which of the following is true about objects?",
      user_answer: "",
      option1: "A. Objects are always created from abstract classes",
      option2: "B. Objects can access private class members",
      option3: "C. Objects do not have methods",
      option4: "D. Objects are not related to classes",
      expected_answer: "B",
      sub_topic: "objects",
    },
    {
      question_number: 6,
      question: "What is the difference between a class and an object?",
      user_answer: "",
      option1: "A. A class is a blueprint, while an object is an instance of a class",
      option2: "B. A class can have properties, while an object cannot",
      option3: "C. A class cannot contain methods, while an object can",
      option4: "D. A class is an instance of an object",
      expected_answer: "A",
      sub_topic: "objects",
    },
  
    // Sub-topic: Constructors
    {
      question_number: 7,
      question: "What is the default constructor in C++?",
      user_answer: "",
      option1: "A. A constructor with no parameters",
      option2: "B. A constructor with default values",
      option3: "C. A constructor that is automatically called",
      option4: "D. A constructor that initializes all variables to zero",
      expected_answer: "A",
      sub_topic: "constructors",
    },
    {
      question_number: 8,
      question: "What is constructor chaining in object-oriented programming?",
      user_answer: "",
      option1: "A. The process of creating multiple objects",
      option2: "B. The process of calling one constructor from another within the same class",
      option3: "C. The process of creating constructors with the same parameters",
      option4: "D. The process of inheriting constructors from a base class",
      expected_answer: "B",
      sub_topic: "constructors",
    },
    {
      question_number: 9,
      question: "What is a parameterized constructor?",
      user_answer: "",
      option1: "A. A constructor with no parameters",
      option2: "B. A constructor with default values",
      option3: "C. A constructor with parameters for initialization",
      option4: "D. A constructor with a return type",
      expected_answer: "C",
      sub_topic: "constructors",
    },
  
    // Sub-topic: Methods
    {
      question_number: 10,
      question: "What is a method in object-oriented programming?",
      user_answer: "",
      option1: "A. A data member of a class",
      option2: "B. A constructor",
      option3: "C. A function that belongs to a class",
      option4: "D. A reserved keyword for inheritance",
      expected_answer: "C",
      sub_topic: "methods",
    },
    {
      question_number: 11,
      question: "What is method overloading?",
      user_answer: "",
      option1: "A. A way to define multiple classes with the same name",
      option2: "B. A way to create multiple methods with the same name but different parameters",
      option3: "C. A way to hide methods from other classes",
      option4: "D. A way to prevent method calls",
      expected_answer: "B",
      sub_topic: "methods",
    },
    {
      question_number: 12,
      question: "What is the 'this' keyword used for in object-oriented programming?",
      user_answer: "",
      option1: "A. It refers to a global variable",
      option2: "B. It refers to the current object instance",
      option3: "C. It refers to the parent class",
      option4: "D. It refers to a static method",
      expected_answer: "B",
      sub_topic: "methods",
    },
  
    // Sub-topic: Inheritance
    {
      question_number: 13,
      question: "What is inheritance in object-oriented programming?",
      user_answer: "",
      option1: "A. A way to create multiple instances of a class",
      option2: "B. A way to hide data from other classes",
      option3: "C. A way to achieve code reusability and method overriding",
      option4: "D. A way to define abstract classes",
      expected_answer: "C",
      sub_topic: "inheritance",
    },
    {
      question_number: 14,
      question: "Which keyword is used to implement inheritance in C++?",
      user_answer: "",
      option1: "A. extends",
      option2: "B. implements",
      option3: "C. inheritance",
      option4: "D. inherits",
      expected_answer: "A",
      sub_topic: "inheritance",
    },
    {
      question_number: 15,
      question: "What is the main advantage of using inheritance in OOP?",
      user_answer: "",
      option1: "A. It reduces code complexity",
      option2: "B. It allows multiple inheritance",
      option3: "C. It makes all methods public",
      option4: "D. It eliminates the need for constructors",
      expected_answer: "A",
      sub_topic: "inheritance",
    },
  ];
  
  // You can continue to add more questions or adjust as needed for further difficulty.
  
  const oopsMcqExitTest = [
    // Sub-topic: Classes
    {
      question_number: 1,
      question: "In object-oriented programming, what is a class primarily responsible for?",
      user_answer: "",
      option1: "A. Storing data",
      option2: "B. Managing memory",
      option3: "C. Defining the blueprint for creating objects",
      option4: "D. Performing calculations",
      expected_answer: "C",
      sub_topic: "classes",
    },
    {
      question_number: 2,
      question: "What is the concept of an 'abstract class' in OOP?",
      user_answer: "",
      option1: "A. A class with no methods",
      option2: "B. A class that cannot be instantiated",
      option3: "C. A class with only private members",
      option4: "D. A class with no properties",
      expected_answer: "B",
      sub_topic: "classes",
    },
    {
      question_number: 3,
      question: "In OOP, what is the purpose of a 'singleton class'?",
      user_answer: "",
      option1: "A. To allow multiple instances of the class",
      option2: "B. To ensure a class has only one instance and provide a global point to it",
      option3: "C. To restrict access to class members",
      option4: "D. To create abstract classes",
      expected_answer: "B",
      sub_topic: "classes",
    },
  
    // Sub-topic: Objects
    {
      question_number: 4,
      question: "What is a 'deep copy' of an object in OOP?",
      user_answer: "",
      option1: "A. A copy that only includes the object's reference",
      option2: "B. A copy that includes cloned object instances within the original object",
      option3: "C. A copy that excludes private members of the object",
      option4: "D. A copy that is read-only",
      expected_answer: "B",
      sub_topic: "objects",
    },
    {
      question_number: 5,
      question: "In OOP, what is 'composition' in relation to objects?",
      user_answer: "",
      option1: "A. Inheriting from multiple classes",
      option2: "B. A design technique where one class contains an object of another class",
      option3: "C. A way to access private members of a class",
      option4: "D. A type of data encapsulation",
      expected_answer: "B",
      sub_topic: "objects",
    },
    {
      question_number: 6,
      question: "What is the purpose of the 'this' pointer in OOP languages like C++?",
      user_answer: "",
      option1: "A. To refer to a global variable",
      option2: "B. To refer to the current object instance",
      option3: "C. To refer to a parent class",
      option4: "D. To define static methods",
      expected_answer: "B",
      sub_topic: "objects",
    },
  
    // Sub-topic: Constructors
    {
      question_number: 7,
      question: "In C++, what is a 'copy constructor' used for?",
      user_answer: "",
      option1: "A. To create an object from another object of the same class",
      option2: "B. To initialize all class members to default values",
      option3: "C. To destroy an object",
      option4: "D. To create a derived class object",
      expected_answer: "A",
      sub_topic: "constructors",
    },
    {
      question_number: 8,
      question: "What is the 'explicit' keyword used for in C++ constructors?",
      user_answer: "",
      option1: "A. To specify that a constructor cannot be called explicitly",
      option2: "B. To specify that a constructor can only be called explicitly",
      option3: "C. To define constructors with a single parameter",
      option4: "D. To specify that a constructor has a default value",
      expected_answer: "A",
      sub_topic: "constructors",
    },
    {
      question_number: 9,
      question: "In C++, what is 'delegating constructors'?",
      user_answer: "",
      option1: "A. Constructors that delegate memory management",
      option2: "B. Constructors that call other constructors within the same class",
      option3: "C. Constructors that inherit properties from a base class",
      option4: "D. Constructors that create objects of another class",
      expected_answer: "B",
      sub_topic: "constructors",
    },
  
    // Sub-topic: Methods
    {
      question_number: 10,
      question: "What is 'method chaining' in object-oriented programming?",
      user_answer: "",
      option1: "A. A method calling itself recursively",
      option2: "B. A technique to call multiple methods of an object in a single line",
      option3: "C. A method that throws exceptions",
      option4: "D. A method with a complex control flow",
      expected_answer: "B",
      sub_topic: "methods",
    },
    {
      question_number: 11,
      question: "What is 'method overriding' in OOP?",
      user_answer: "",
      option1: "A. A method that hides other methods",
      option2: "B. A method with the same name and parameters in the base and derived classes",
      option3: "C. A method that calls another method",
      option4: "D. A method that cannot be accessed outside the class",
      expected_answer: "B",
      sub_topic: "methods",
    },
    {
      question_number: 12,
      question: "In OOP, what is a 'virtual method'?",
      user_answer: "",
      option1: "A. A method that cannot be overridden",
      option2: "B. A method that is inherited from a parent class",
      option3: "C. A method that can be overridden in derived classes",
      option4: "D. A method with a static keyword",
      expected_answer: "C",
      sub_topic: "methods",
    },
  
    // Sub-topic: Inheritance
    {
      question_number: 13,
      question: "What is 'multiple inheritance' in OOP?",
      user_answer: "",
      option1: "A. Inheriting from multiple classes simultaneously",
      option2: "B. Inheriting multiple methods from the same class",
      option3: "C. Inheriting private members only",
      option4: "D. Inheriting constructors",
      expected_answer: "A",
      sub_topic: "inheritance",
    },
    {
      question_number: 14,
      question: "What is 'method hiding' in the context of inheritance?",
      user_answer: "",
      option1: "A. A method that is not accessible in the derived class",
      option2: "B. A method with the same name in the base and derived classes",
      option3: "C. A method that is automatically called during object creation",
      option4: "D. A method that cannot be called",
      expected_answer: "B",
      sub_topic: "inheritance",
    },
    {
      question_number: 15,
      question: "In OOP, what is 'composition over inheritance'?",
      user_answer: "",
      option1: "A. A technique to prefer inheritance over composition",
      option2: "B. A design principle that favors using composition to build complex objects",
      option3: "C. A method to hide composition relationships",
      option4: "D. A way to eliminate constructors",
      expected_answer: "B",
      sub_topic: "inheritance",
    },
  ];
  
  // You can continue to add more questions or adjust as needed for further difficulty.

  const dsaMcqExitTest = [
    // Sub-topic: Arrays
    {
      question_number: 1,
      question: "What is the time complexity of finding an element in an unsorted array of 'n' elements?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "C",
      sub_topic: "arrays",
    },
    {
      question_number: 2,
      question: "What is an 'in-place' algorithm in the context of array sorting?",
      user_answer: "",
      option1: "A. An algorithm that uses additional memory for sorting",
      option2: "B. An algorithm that doesn't use additional memory for sorting",
      option3: "C. An algorithm that uses recursion",
      option4: "D. An algorithm that always sorts in descending order",
      expected_answer: "B",
      sub_topic: "arrays",
    },
    {
      question_number: 3,
      question: "What is a 'sparse array'?",
      user_answer: "",
      option1: "A. An array with a large number of elements",
      option2: "B. An array with no empty cells",
      option3: "C. An array with mostly empty or uninitialized cells",
      option4: "D. An array that is always sorted",
      expected_answer: "C",
      sub_topic: "arrays",
    },
  
    // Sub-topic: Linked Lists
    {
      question_number: 4,
      question: "What is the time complexity of inserting a node at the end of a singly linked list of 'n' nodes?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "A",
      sub_topic: "linkedLists",
    },
    {
      question_number: 5,
      question: "What is the difference between a singly linked list and a doubly linked list?",
      user_answer: "",
      option1: "A. Singly linked lists have only one node, while doubly linked lists have two nodes.",
      option2: "B. Singly linked lists allow traversal in only one direction, while doubly linked lists allow traversal in both directions.",
      option3: "C. Singly linked lists have a higher time complexity for insertion and deletion operations.",
      option4: "D. Doubly linked lists have a lower space complexity.",
      expected_answer: "B",
      sub_topic: "linkedLists",
    },
    {
      question_number: 6,
      question: "What is a 'circular linked list'?",
      user_answer: "",
      option1: "A. A linked list with nodes in a circular pattern",
      option2: "B. A linked list with no loops",
      option3: "C. A linked list where the last node points to the first node",
      option4: "D. A linked list with only one node",
      expected_answer: "C",
      sub_topic: "linkedLists",
    },
  
    // Sub-topic: Stacks
    {
      question_number: 7,
      question: "Which data structure follows the 'Last In, First Out' (LIFO) principle?",
      user_answer: "",
      option1: "A. Queue",
      option2: "B. Stack",
      option3: "C. Linked List",
      option4: "D. Array",
      expected_answer: "B",
      sub_topic: "stacks",
    },
    {
      question_number: 8,
      question: "What is the purpose of the 'pop' operation in a stack?",
      user_answer: "",
      option1: "A. To add an element to the stack",
      option2: "B. To access the top element of the stack",
      option3: "C. To remove the top element from the stack",
      option4: "D. To reverse the order of elements in the stack",
      expected_answer: "C",
      sub_topic: "stacks",
    },
    {
      question_number: 9,
      question: "In a stack, what is 'stack overflow'?",
      user_answer: "",
      option1: "A. The condition when the stack is empty",
      option2: "B. The condition when the stack is full",
      option3: "C. The condition when elements are inserted at the bottom of the stack",
      option4: "D. The condition when the stack is sorted",
      expected_answer: "B",
      sub_topic: "stacks",
    },
  
    // Sub-topic: Queues
    {
      question_number: 10,
      question: "Which data structure follows the 'First In, First Out' (FIFO) principle?",
      user_answer: "",
      option1: "A. Stack",
      option2: "B. Queue",
      option3: "C. Linked List",
      option4: "D. Array",
      expected_answer: "B",
      sub_topic: "queues",
    },
    {
      question_number: 11,
      question: "What is the purpose of the 'enqueue' operation in a queue?",
      user_answer: "",
      option1: "A. To remove an element from the front of the queue",
      option2: "B. To add an element to the front of the queue",
      option3: "C. To remove an element from the rear of the queue",
      option4: "D. To add an element to the rear of the queue",
      expected_answer: "D",
      sub_topic: "queues",
    },
    {
      question_number: 12,
      question: "What is 'priority queue' in the context of queues?",
      user_answer: "",
      option1: "A. A queue that is always empty",
      option2: "B. A queue that allows random access to elements",
      option3: "C. A queue where elements are assigned priorities, and higher-priority elements are dequeued first",
      option4: "D. A queue with a fixed size",
      expected_answer: "C",
      sub_topic: "queues",
    },
  
    // Sub-topic: Trees
    {
      question_number: 13,
      question: "What is the height of a balanced binary search tree with 'n' nodes?",
      user_answer: "",
      option1: "A. O(n)",
      option2: "B. O(log n)",
      option3: "C. O(n^2)",
      option4: "D. O(1)",
      expected_answer: "B",
      sub_topic: "trees",
    },
    {
      question_number: 14,
      question: "In a binary tree, what is the 'level' of a node?",
      user_answer: "",
      option1: "A. The number of children a node has",
      option2: "B. The number of edges in the path from the root to the node",
      option3: "C. The value of the node",
      option4: "D. The height of the node",
      expected_answer: "B",
      sub_topic: "trees",
    },
    {
      question_number: 15,
      question: "What is the time complexity of finding the lowest common ancestor (LCA) of two nodes in a binary tree?",
      user_answer: "",
      option1: "A. O(log n)",
      option2: "B. O(n)",
      option3: "C. O(1)",
      option4: "D. O(n^2)",
      expected_answer: "B",
      sub_topic: "trees",
    },
  ];
  
  // You can continue to add more questions or adjust as needed for further difficulty.
  const dsaMcqEntryTest = [
    // Sub-topic: Arrays
    {
      question_number: 1,
      question: "What is the time complexity of finding an element in an unsorted array of 'n' elements using binary search?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "B",
      sub_topic: "arrays",
    },
    {
      question_number: 2,
      question: "What is the term for an array where each element is less than or equal to every element to its right?",
      user_answer: "",
      option1: "A. Monotonic array",
      option2: "B. Sparse array",
      option3: "C. Dense array",
      option4: "D. Red-Black array",
      expected_answer: "A",
      sub_topic: "arrays",
    },
    {
      question_number: 3,
      question: "In the context of arrays, what does the term 'pivot element' refer to?",
      user_answer: "",
      option1: "A. The first element in the array",
      option2: "B. The middle element in the array",
      option3: "C. An element used for partitioning in sorting algorithms like QuickSort",
      option4: "D. The largest element in the array",
      expected_answer: "C",
      sub_topic: "arrays",
    },
  
    // Sub-topic: Linked Lists
    {
      question_number: 4,
      question: "What is the time complexity of reversing a singly linked list of 'n' nodes?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "C",
      sub_topic: "linkedLists",
    },
    {
      question_number: 5,
      question: "What is the term for a linked list where the last node points to some node in the middle of the list?",
      user_answer: "",
      option1: "A. Circular linked list",
      option2: "B. Doubly linked list",
      option3: "C. Skiplist",
      option4: "D. Self-referencing linked list",
      expected_answer: "A",
      sub_topic: "linkedLists",
    },
    {
      question_number: 6,
      question: "What is 'skip list' in data structures?",
      user_answer: "",
      option1: "A. A type of linked list with a skip operation",
      option2: "B. A data structure similar to a binary search tree",
      option3: "C. A type of hash table",
      option4: "D. A type of heap data structure",
      expected_answer: "B",
      sub_topic: "linkedLists",
    },
  
    // Sub-topic: Stacks
    {
      question_number: 7,
      question: "In stack-based memory allocation, what is 'stack overflow'?",
      user_answer: "",
      option1: "A. The condition when the stack is empty",
      option2: "B. The condition when the stack is full",
      option3: "C. The condition when elements are inserted at the bottom of the stack",
      option4: "D. The condition when the stack is sorted in descending order",
      expected_answer: "B",
      sub_topic: "stacks",
    },
    {
      question_number: 8,
      question: "What is the time complexity of evaluating a postfix expression using a stack?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "C",
      sub_topic: "stacks",
    },
    {
      question_number: 9,
      question: "In the context of stack-based algorithms, what does 'RPN' stand for?",
      user_answer: "",
      option1: "A. Reverse Polish Notation",
      option2: "B. Right Parenthesis Notation",
      option3: "C. Recursive Procedure Notation",
      option4: "D. Redundant Parentheses Notation",
      expected_answer: "A",
      sub_topic: "stacks",
    },
  
    // Sub-topic: Queues
    {
      question_number: 10,
      question: "What is the time complexity of dequeuing an element from a priority queue with 'n' elements?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "B",
      sub_topic: "queues",
    },
    {
      question_number: 11,
      question: "What is a 'circular queue'?",
      user_answer: "",
      option1: "A. A queue with a circular shape",
      option2: "B. A queue that only allows elements to be enqueued at the front",
      option3: "C. A queue where the last element points to the first element",
      option4: "D. A queue that can hold elements in a circular pattern",
      expected_answer: "C",
      sub_topic: "queues",
    },
    {
      question_number: 12,
      question: "What is the time complexity of enqueuing and dequeuing elements in a double-ended queue (deque) implemented as a doubly linked list?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "A",
      sub_topic: "queues",
    },
  
    // Sub-topic: Trees
    {
      question_number: 13,
      question: "What is the time complexity of finding the kth smallest element in a binary search tree with 'n' nodes?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "B",
      sub_topic: "trees",
    },
    {
      question_number: 14,
      question: "What is the difference between a binary search tree (BST) and a balanced binary search tree (BBST)?",
      user_answer: "",
      option1: "A. BSTs always have a height of O(n), while BBSTs have a height of O(log n).",
      option2: "B. BSTs do not allow duplicates, while BBSTs do.",
      option3: "C. BSTs have a height-balancing property, while BBSTs do not.",
      option4: "D. BSTs are implemented as arrays, while BBSTs use linked lists.",
      expected_answer: "A",
      sub_topic: "trees",
    },
    {
      question_number: 15,
      question: "What is the time complexity of finding the lowest common ancestor (LCA) of two nodes in a binary tree using the Tarjan's offline LCA algorithm?",
      user_answer: "",
      option1: "A. O(1)",
      option2: "B. O(log n)",
      option3: "C. O(n)",
      option4: "D. O(n^2)",
      expected_answer: "A",
      sub_topic: "trees",
    },
  ];
  
  // You can continue to add more questions or adjust as needed for further difficulty.


export {
  cCppMcqEntryTest,
  cCppMcqExitTest,
  javaMcqEntryTest,
  javaMcqExitTest,
  oopsMcqEntryTest,
  oopsMcqExitTest,
  dsaMcqEntryTest,
  dsaMcqExitTest,
}